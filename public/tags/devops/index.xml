<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Devops on Daniel Schaaff</title>
    <link>http://localhost:1313/tags/devops/</link>
    <description>Recent content in Devops on Daniel Schaaff</description>
    <generator>Hugo -- 0.147.4</generator>
    <language>en</language>
    <lastBuildDate>Sat, 19 Jan 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Easy Integrations Tests for Java with the Maven Docker Plugin</title>
      <link>http://localhost:1313/posts/2019/easy-integrations-tests-for-java-with-the-maven-docker-plugin/</link>
      <pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/2019/easy-integrations-tests-for-java-with-the-maven-docker-plugin/</guid>
      <description>&lt;p&gt;Traditionally it has been a pain to manage the infrastructure necessary for running integration tests within a CI/CD pipeline. Several years ago I accomplished this with an RDS instance for the database in AWS dedicated solely to the test environment. The problem is that multiple tests running at the same time would cause conflicts as they inserted and removed data in the database. At the time I set a lock in Jenkins to only allow one service to utilize the test database at a time, but this was far from ideal. Thankfully there are a lot of good options for solving this problem. I’m particularly fond of using the Docker plugin for Maven to handle this when dealing with Java-based applications.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Monitoring Creation of Log Files in s3</title>
      <link>http://localhost:1313/posts/2018/monitoring-creation-of-log-files-in-s3/</link>
      <pubDate>Wed, 29 Aug 2018 03:45:14 +0000</pubDate>
      <guid>http://localhost:1313/posts/2018/monitoring-creation-of-log-files-in-s3/</guid>
      <description>&lt;p&gt;I manage several apps that write various pieces of data to the local file system and rely on Fluentd to ship them to s3. There is solid monitoring around the fluentd aggregator process, but I wanted better visibility and alerting when things aren’t written to s3 as expected.&lt;/p&gt;
&lt;p&gt;The solution I came up with was a &lt;a href=&#34;https://github.com/dschaaff/datadog-checks&#34;&gt;custom Datadog check&lt;/a&gt;. The files I am monitoring are written into a bucket named something like &lt;code&gt;example-logs/data/event-files/year/month/day&lt;/code&gt;. A new path is set up in the s3 bucket for the current day’s date, e.g. &lt;code&gt;logs/data/example-log/2018/08/15&lt;/code&gt; each day. The Datadog check sends the count of objects in the current date’s directory as a gauge. You can then monitor that objects are created each day as expected and at a normal rate.&lt;/p&gt;</description>
    </item>
    <item>
      <title>No Longer Barfing at the Mention of ChatOps</title>
      <link>http://localhost:1313/posts/2016/no-longer-barfing-at-the-mention-of-chatops/</link>
      <pubDate>Fri, 11 Nov 2016 01:58:29 +0000</pubDate>
      <guid>http://localhost:1313/posts/2016/no-longer-barfing-at-the-mention-of-chatops/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve poked a lot of fun at chatops but I have found some value in portions of the practice. Let me state upfront that I do not believe paying attention to the chat room all day and having your attention interrupted non-stop is a productive or healthy practice. I have found some big benefits to &amp;ldquo;chatops&amp;rdquo; however.&lt;/p&gt;
&lt;h2 id=&#34;visibility&#34;&gt;Visibility&lt;/h2&gt;
&lt;p&gt;Work that is done in the chatroom, or filtered into the chatroom, is visible to the whole team. This helps the team be aware of what others are doing and stay up to date. I&amp;rsquo;ve picked up on quite a few things from this that I wouldn&amp;rsquo;t have learned other wise. This is also why we choose to route a fair amount of notifications into chat. For example we have Jira connected to HipChat and it makes it really easy to stay on top of issues. We also push commit notifications, build notifications, etc in the chatroom. The downside to this is that the rooms get noisy and make it harder to follow actual conversations between humans. One strategy we use to combat that is creating multiple rooms and focusing them around a subject.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
